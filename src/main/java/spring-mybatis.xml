<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:util="http://www.springframework.org/schema/util"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
     	http://www.springframework.org/schema/util
     	http://www.springframework.org/schema/util/spring-util-2.5.xsd">
        
    <!-- 自动扫描 -->
    <mvc:annotation-driven/>
    <context:component-scan base-package="com.panda.*.controller,com.panda.project.*"></context:component-scan>
    
    <bean id="propertyConfigurer" class ="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" >    
        <property name="location" value="classpath:dbconfig.properties" />  
    	<property name="ignoreUnresolvablePlaceholders" value="true" />   
    </bean>
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
    	<property name="driverClassName" value="com.mysql.jdbc.Driver" />  
        <property name="url" value="jdbc:mysql://localhost:3306/test001?useUnicode=true&amp;characterEncoding=utf8"/>  
        <property name="username" value="root" />  
        <property name="password" value="root" />    
    </bean> -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        destroy-method="close">  
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${jdbc.url}"/>    
       <property name = "username" value = "${jdbc.username}" />    
       <property name = "password" value = "${jdbc.password}" />    
       <property name = "driverClassName" value = "${jdbc.driverClassName}" />    
       <property name = "filters" value = "${jdbc.filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${jdbc.maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${jdbc.initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${jdbc.maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${jdbc.minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${jdbc.timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${jdbc.minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${jdbc.validationQuery}" />    
       <property name = "testWhileIdle" value = "${jdbc.testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${jdbc.testOnBorrow}" />    
       <property name = "testOnReturn" value = "${jdbc.testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${jdbc.maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${jdbc.removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${jdbc.removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${jdbc.logAbandoned}" />  
    </bean>  
	  <!-- 配置Session工厂 -->
     <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="dataSource" ref="dataSource"></property>
         <!-- 加载mybatis-config.xml文件 -->
         <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations">
			<array>
				<value>classpath:com/panda/mapper/system/*.xml</value>
				<value>classpath:com/panda/mapper/project/hospital/*.xml</value>
				<value>classpath:com/panda/mapper/project/device/*.xml</value>
			</array>
		</property>
     </bean>
     
     <!-- 自动扫描所有的Mapper接口与文件 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <property name="basePackage" value="com.panda.*.dao,com.panda.*.*.dao"></property>
         <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
     </bean>
     
     <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx(声明式) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
  
	<!-- 配置事务传播特性 -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <!-- 定义事务传播属性 -->  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="new*" propagation="REQUIRED" />  
            <tx:method name="set*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="change*" propagation="REQUIRED" />  
            <tx:method name="check*" propagation="REQUIRED" />  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
        </tx:attributes>  
    </tx:advice>  
    <!-- 配置事务切面 -->  
    <aop:config >  
        <aop:pointcut id="serviceOperation"  
            expression="execution(* com.panda.system.service.*.*(..)) or execution(* com.panda.project.hospital.service.*.*(..)) " />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" /> 
    </aop:config>
    
    <!-- AOP切面方法 -->
   <!--  <bean id="logHandler" class="com.panda.util.LogHandler" />
      
    <aop:config>  
        <aop:aspect id="aspect" ref="logHandler">  
    		<aop:pointcut id="pointUserMgr" expression="execution(* com.panda.service.impl.*.*(..))"/>  
            <aop:before method="beforeAct"  pointcut-ref="pointUserMgr"/>  
            <aop:after method="afterAct"  pointcut-ref="pointUserMgr"/>  
        </aop:aspect>  
    </aop:config> -->
    <!-- 定时任务 -->
   <!--  <bean id="quartzTaskJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
    	<property name="jobClass" value="com.panda.util.QuartzTask001"></property>
    	<property name="durability" value="true"></property>
    </bean>
    <bean id="quartzTaskJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
     	<property name="jobDetail" ref="quartzTaskJob"></property>
	    <property name="cronExpression" value="0/30 * * * * ?"></property>
    </bean>
      总管理类如果将lazy-init='false'那么容器启动就会执行调度程序    
    <bean id="startQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false" >  
        <property name="triggers">  
            <list>  
                作业调度器,list下可加入其他的调度器  
                <ref bean="quartzTaskJobTrigger" /> 
            </list>  
        </property>  
    </bean>   -->
</beans>